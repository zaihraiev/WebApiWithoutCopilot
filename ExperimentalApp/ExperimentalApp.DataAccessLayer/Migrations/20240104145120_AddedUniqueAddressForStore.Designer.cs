// <auto-generated />
using System;
using ExperimentalApp.DataAccessLayer.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace ExperimentalApp.DataAccessLayer.Migrations
{
    [DbContext(typeof(DvdRentalContext))]
    [Migration("20240104145120_AddedUniqueAddressForStore")]
    partial class AddedUniqueAddressForStore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "mpaa_rating", new[] { "G", "PG", "PG-13", "R", "NC-17" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("actor_actor_id_seq");

            modelBuilder.HasSequence("address_address_id_seq");

            modelBuilder.HasSequence("category_category_id_seq");

            modelBuilder.HasSequence("city_city_id_seq");

            modelBuilder.HasSequence("country_country_id_seq");

            modelBuilder.HasSequence("customer_customer_id_seq");

            modelBuilder.HasSequence("film_film_id_seq");

            modelBuilder.HasSequence("inventory_inventory_id_seq");

            modelBuilder.HasSequence("language_language_id_seq");

            modelBuilder.HasSequence("payment_payment_id_seq");

            modelBuilder.HasSequence("rental_rental_id_seq");

            modelBuilder.HasSequence("staff_staff_id_seq");

            modelBuilder.HasSequence("store_store_id_seq");

            modelBuilder.Entity("ExperimentalApp.Core.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("actor_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ActorId")
                        .HasName("actor_pkey");

                    b.HasIndex(new[] { "LastName" }, "idx_actor_last_name");

                    b.ToTable("actor", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.ActorInfo", b =>
                {
                    b.Property<int?>("ActorId")
                        .HasColumnType("integer")
                        .HasColumnName("actor_id");

                    b.Property<string>("FilmInfo")
                        .HasColumnType("text")
                        .HasColumnName("film_info");

                    b.Property<string>("FirstName")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("last_name");

                    b.ToTable((string)null);

                    b.ToView("actor_info ", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address2");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("district");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.HasKey("AddressId")
                        .HasName("address_pkey");

                    b.HasIndex(new[] { "CityId" }, "idx_fk_city_id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.BlackListedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedTokens");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("category_pkey");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CityId"));

                    b.Property<string>("City1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.HasKey("CityId")
                        .HasName("city_pkey");

                    b.HasIndex(new[] { "CountryId" }, "idx_fk_country_id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Country1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.HasKey("CountryId")
                        .HasName("country_pkey");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<int?>("Active")
                        .HasColumnType("integer")
                        .HasColumnName("active");

                    b.Property<bool?>("Activebool")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activebool")
                        .HasDefaultValueSql("true");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<DateOnly>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("('now'::text)::date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.HasKey("CustomerId")
                        .HasName("customer_pkey");

                    b.HasIndex(new[] { "AddressId" }, "idx_fk_address_id");

                    b.HasIndex(new[] { "StoreId" }, "idx_fk_store_id");

                    b.HasIndex(new[] { "LastName" }, "idx_last_name");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.CustomerList", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("Sid")
                        .HasColumnType("integer")
                        .HasColumnName("sid");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip code");

                    b.ToTable((string)null);

                    b.ToView("customer_list", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("film_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilmId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<NpgsqlTsVector>("Fulltext")
                        .IsRequired()
                        .HasColumnType("tsvector")
                        .HasColumnName("fulltext");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<short?>("Length")
                        .HasColumnType("smallint")
                        .HasColumnName("length");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year");

                    b.Property<short>("RentalDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("rental_duration")
                        .HasDefaultValueSql("3");

                    b.Property<decimal>("RentalRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("rental_rate")
                        .HasDefaultValueSql("4.99");

                    b.Property<decimal>("ReplacementCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("replacement_cost")
                        .HasDefaultValueSql("19.99");

                    b.Property<string[]>("SpecialFeatures")
                        .HasColumnType("text[]")
                        .HasColumnName("special_features");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("FilmId")
                        .HasName("film_pkey");

                    b.HasIndex(new[] { "Fulltext" }, "film_fulltext_idx");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Fulltext" }, "film_fulltext_idx"), "gist");

                    b.HasIndex(new[] { "LanguageId" }, "idx_fk_language_id");

                    b.HasIndex(new[] { "Title" }, "idx_title");

                    b.ToTable("film", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.FilmActor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("integer")
                        .HasColumnName("actor_id");

                    b.Property<int>("FilmId")
                        .HasColumnType("integer")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ActorId", "FilmId")
                        .HasName("film_actor_pkey");

                    b.HasIndex(new[] { "FilmId" }, "idx_fk_film_id");

                    b.ToTable("film_actor", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.FilmCategory", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("integer")
                        .HasColumnName("film_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.HasKey("FilmId", "CategoryId")
                        .HasName("film_category_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("film_category", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.FilmList", b =>
                {
                    b.Property<string>("Actors")
                        .HasColumnType("text")
                        .HasColumnName("actors");

                    b.Property<string>("Category")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Fid")
                        .HasColumnType("integer")
                        .HasColumnName("fid");

                    b.Property<short?>("Length")
                        .HasColumnType("smallint")
                        .HasColumnName("length");

                    b.Property<decimal?>("Price")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.ToTable((string)null);

                    b.ToView("film_list", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("FilmId")
                        .HasColumnType("integer")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.HasKey("InventoryId")
                        .HasName("inventory_pkey");

                    b.HasIndex("FilmId");

                    b.HasIndex(new[] { "StoreId", "FilmId" }, "idx_store_id_film_id");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LanguageId"));

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character(20)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.HasKey("LanguageId")
                        .HasName("language_pkey");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.NicerButSlowerFilmList", b =>
                {
                    b.Property<string>("Actors")
                        .HasColumnType("text")
                        .HasColumnName("actors");

                    b.Property<string>("Category")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Fid")
                        .HasColumnType("integer")
                        .HasColumnName("fid");

                    b.Property<short?>("Length")
                        .HasColumnType("smallint")
                        .HasColumnName("length");

                    b.Property<decimal?>("Price")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.ToTable((string)null);

                    b.ToView("nicer_but_slower_film_list", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("amount");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date");

                    b.Property<int>("RentalId")
                        .HasColumnType("integer")
                        .HasColumnName("rental_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.HasKey("PaymentId")
                        .HasName("payment_pkey");

                    b.HasIndex(new[] { "CustomerId" }, "idx_fk_customer_id");

                    b.HasIndex(new[] { "RentalId" }, "idx_fk_rental_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_fk_staff_id");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rental_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RentalId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("rental_date");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("return_date");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.HasKey("RentalId")
                        .HasName("rental_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex(new[] { "InventoryId" }, "idx_fk_inventory_id");

                    b.HasIndex(new[] { "RentalDate", "InventoryId", "CustomerId" }, "idx_unq_rental_rental_date_inventory_id_customer_id")
                        .IsUnique();

                    b.ToTable("rental", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.SalesByFilmCategory", b =>
                {
                    b.Property<string>("Category")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("category");

                    b.Property<decimal?>("TotalSales")
                        .HasColumnType("numeric")
                        .HasColumnName("total_sales");

                    b.ToTable((string)null);

                    b.ToView("sales_by_film_category", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.SalesByStore", b =>
                {
                    b.Property<string>("Manager")
                        .HasColumnType("text")
                        .HasColumnName("manager");

                    b.Property<string>("Store")
                        .HasColumnType("text")
                        .HasColumnName("store");

                    b.Property<decimal?>("TotalSales")
                        .HasColumnType("numeric")
                        .HasColumnName("total_sales");

                    b.ToTable((string)null);

                    b.ToView("sales_by_store", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StaffId"));

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Password")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("password");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea")
                        .HasColumnName("picture");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("username");

                    b.HasKey("StaffId")
                        .HasName("staff_pkey");

                    b.HasIndex("AddressId");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.StaffList", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("Sid")
                        .HasColumnType("integer")
                        .HasColumnName("sid");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip code");

                    b.ToTable((string)null);

                    b.ToView("staff_list", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StoreId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ManagerStaffId")
                        .HasColumnType("text")
                        .HasColumnName("manager_staff_id");

                    b.HasKey("StoreId")
                        .HasName("store_pkey");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex(new[] { "ManagerStaffId" }, "idx_unq_manager_staff_id")
                        .IsUnique();

                    b.ToTable("store", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("StoreId")
                        .HasColumnType("integer");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Address", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("fk_address_city");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.City", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("fk_city");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Customer", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("customer_address_id_fkey");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Film", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Language", "Language")
                        .WithMany("Films")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("film_language_id_fkey");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.FilmActor", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Actor", "Actor")
                        .WithMany("FilmActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("film_actor_actor_id_fkey");

                    b.HasOne("ExperimentalApp.Core.Models.Film", "Film")
                        .WithMany("FilmActors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("film_actor_film_id_fkey");

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.FilmCategory", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Category", "Category")
                        .WithMany("FilmCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("film_category_category_id_fkey");

                    b.HasOne("ExperimentalApp.Core.Models.Film", "Film")
                        .WithMany("FilmCategories")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("film_category_film_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Inventory", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Film", "Film")
                        .WithMany("Inventories")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("inventory_film_id_fkey");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Payment", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("payment_customer_id_fkey");

                    b.HasOne("ExperimentalApp.Core.Models.Rental", "Rental")
                        .WithMany("Payments")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("payment_rental_id_fkey");

                    b.HasOne("ExperimentalApp.Core.Models.Staff", "Staff")
                        .WithMany("Payments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("payment_staff_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Rental");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Rental", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("rental_customer_id_fkey");

                    b.HasOne("ExperimentalApp.Core.Models.Inventory", "Inventory")
                        .WithMany("Rentals")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("rental_inventory_id_fkey");

                    b.HasOne("ExperimentalApp.Core.Models.Staff", "Staff")
                        .WithMany("Rentals")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("rental_staff_id_key");

                    b.Navigation("Customer");

                    b.Navigation("Inventory");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Staff", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Address", "Address")
                        .WithMany("Staff")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("staff_address_id_fkey");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Store", b =>
                {
                    b.HasOne("ExperimentalApp.Core.Models.Address", "Address")
                        .WithMany("Stores")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("store_address_id_fkey");

                    b.HasOne("ExperimentalApp.Core.Models.Identity.ApplicationUser", "ManagerStaff")
                        .WithOne("Store")
                        .HasForeignKey("ExperimentalApp.Core.Models.Store", "ManagerStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("store_manager_staff_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("ManagerStaff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Actor", b =>
                {
                    b.Navigation("FilmActors");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Staff");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Category", b =>
                {
                    b.Navigation("FilmCategories");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Customer", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Film", b =>
                {
                    b.Navigation("FilmActors");

                    b.Navigation("FilmCategories");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Inventory", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Language", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Rental", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Staff", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ExperimentalApp.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Store");
                });
#pragma warning restore 612, 618
        }
    }
}
